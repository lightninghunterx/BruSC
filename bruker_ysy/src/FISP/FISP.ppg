;**************************************************************** ;
; Copyright (c) 2000 - 2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;*****************************************

define list<frequency> o1list = {$ACQ_O1_list}
define list<frequency> o2list = {$ACQ_O2_list}
define list<frequency> o3list = {$ACQ_O3_list}
define list<frequency> onres  = {0.0}
define list<frequency> freqRx = {$ACQ_O1B_list}
define list <shape> preplist = {$PrepPulseList}

define delay dur20
"dur20 = d20 - de"

define delay dur1
"dur1 =d1 - 10u"

define delay d1x
"d1x = d1 - 25u"

define delay d9x
"d9x = d9 - 20u"

#include <MRI.include>
#include <PrepModulesHead.mod>

INIT_DEVICES

#define r2d ACQ_spatial_phase_1
#define r3d ACQ_spatial_phase_2

grad_zero_for_gs <r2d, r3d>


start,   d4
segm,    0u         r2d.store
         0u         r3d.store
               subr TriggerPhase()
slice,   5u         freqRx(receive):f1
         5u         preplist.res
;----------------------- Trigger----------------

subr TriggerSlice()

;----------------------end of Trigger --------------
;--------------------------Inversion----------------
if(FISP_inversion_enable == Yes)
{
inv,     d4         onres:f1            ;on resonance
        (p4:sp4     ph4):f1             ;inversion pulse
        d16                            ;inversion time
}
;-----------------------end of Inversion-----------

;--- spoiler before each slice, and setting the slice grad for the alpha/2
        d10         grad_ramp{0, 0, g12}
         d4         grad_ramp{0, 0, g0} o1list:f1
;---alpha/2 -----
if(Ssfp_preparation == Alpha_2)
{
alpha2, 10u
        (p0:sp3     ph3):f1
        10u
         d4         grad_ramp{0, 0, g11}
        10u         o3list:f1
        d9x
        10u         o1list:f1
         d4         grad_ramp{0, 0, g0}
}
;---end of alpha/2 -----
;-- initial dummy echoes -----------------------
if(L[6] != 0)
{
init1,  10u
	(p0:sp0     ph0):f1
	10u
         5u         grad_ramp{g2, 0, g1}
        10u         o2list:f1       ;phase advance - start
	d1x                   ;
	10u         o1list:f1       ;phase advance - end
	 d4         grad_ramp{g5, 0, 0}
        d20         ph1
   AQ_(job0)
        d21
if(RFSpoilerOnOff == On)
{
         d1         grad_ramp{g9, 0, g10}  o2list.inc
}
else
{
         d1         grad_ramp{g9, 0, g10}
}
         d4         grad_ramp{0, 0, g0}
        lo to init1 times l6
}

;--- end of alpha/2 and dummy echoes ------------
;--- Starter Sequence  --------------------------
if(Ssfp_preparation == Starter_Sequence)
{
;--  Preparation for Mz   -----------------------
alpha,  10u
	(p0:sp5     ph5):f1
	10u
         5u         grad_ramp{0, 0, g1}

        10u         o2list:f1       ;phase advance - start
	d1x
	10u	    o1list:f1       ;phase advance - end
	 d4         grad_ramp{0, 0, 0}
        d20         ph1
   AQ_(job0)
        d21
         d1         grad_ramp{0, 0, g10}
         d4         grad_ramp{0, 0, g0}
        10u
	(p0:sp6     ph6):f1
	10u
        d11         grad_ramp{g6,0, g6}
         d4         grad_ramp{0, 0, g0}

;--  Preparation for Mxy   -----------------------
if(L[7] != 0)
{
init2,  10u
	(p0:preplist 	 ph0):f1
	10u
         5u         grad_ramp{g2, 0, g1}

        10u         o2list:f1      ;phase advance - start
	d1x                     ;
	10u         o1list:f1      ;phase advance - end
	 d4         grad_ramp{g5, 0, 0}
        d20         ph1
   AQ_(job0)
        d21         preplist.inc
if(RFSpoilerOnOff == On)
{
         d1         grad_ramp{g9, 0, g10}  o2list.inc
}
else
{
         d1         grad_ramp{g9, 0, g10}
}
         d4         grad_ramp{0, 0, g0}
        lo to init2 times l7
}
}
; ---- End of Starter Sequence ---------------

;----------------- movie loop-----------------
movie,   0u          r2d.restore
         0u          r3d.restore
;------------------- ssfp loops --------------
ssfp,   10u
	(p0:sp0     ph0):f1
	10u					;compensation
if(RFSpoilerOnOff == On)
{
         d1         grad_ramp{g2, r2d*g3, g1+r3d*g4}
}
else
{
         5u         grad_ramp{g2, r2d*g3, g1+r3d*g4}

        10u         o2list:f1       ;phase advance - start
        d1x
        10u         o1list:f1       ;phase advance - end
}

;-------------------------frequency encoding---------------
         d4 	    grad_ramp{g5, 0, 0} o1list:f1
      dur20
                    ADC_INIT_(job0, ph0,ph1)
   AQ_(job0)        ADC_START_(job0)
        d21
;------------------------spoiler + phase rewinding -------
if(RFSpoilerOnOff == On)
{
        10u         ADC_END_(job0)
         5u         grad_ramp{g9, r2d*g7, g10+r3d*g8}
        10u         o2list:f1       ;phase advance - start
        d1x
         5u         o1list:f1
         5u         o2list.inc
}
else
{
       dur1   	    grad_ramp{g9, r2d*g7, g10+r3d*g8}
	10u         ADC_END_(job0)
}
	 d4         grad_ramp{0, 0, g0}

;------------------------2d loops--------------------------
	0u          r2d.inc
        0u          r3d.inc
if (l4 != 1)
{
	lo to ssfp times l4 ;   l4 = PVM_RareFactor
}
;------------------end of ssfp loops ----------------------


;----------------------ssdum loops--------------------------

 if(SeparationEchoes > 0)
 {
        0u      r2d.dec
        0u      r3d.dec
ssdum,  10u
        (p0:sp0  ph0):f1
        10u
         5u     grad_ramp{g2, r2d*g3, g1+r3d*g4}
        10u     o2list:f1       ;phase advance - start
	d1x
	10u	o1list:f1       ;phase advance - end
         d4     grad_ramp{g5, 0, 0}
        d20     ph1
   AQ_(job0)
        d21

     if(RFSpoilerOnOff == On)
     {
         d1     grad_ramp{g9, r2d*g7, g10+r3d*g8}  o2list.inc
     }
     else
     {
         d1     grad_ramp{g9, r2d*g7, g10+r3d*g8}
     }
         d4     grad_ramp{0, 0, g0}

        lo to ssdum times l1
         5u
         0u     r2d.inc
         0u     r3d.inc
}
;-----------------------end of ssdum loop----------------------

        lo to movie times l3    ;  l3 = number of frames (movie loop)
;-----------------------end of movie loop----------------------
     if(KeepSteadyState3D==Yes)
     {
	lo to ssfp times l5	;  l5 = Nsegments
     }
;--------------------end of steady state 3D loop----------------
	 0u     grad_matrix.inc
         0u     o1list.inc
         0u     o3list.inc
         0u     freqRx.inc
     if(RFSpoilerOnOff == On)
     {
         0u     o2list.res
     }
     else
     {
         0u     o2list.inc
     }
         d4     grad_off        ;  to prevent "grad ON" for a long time
         d6                     ;  add. delay controlled by Scan_RepetitionTime/Inv_Rep_time
        lo to slice times NSLICES
;-----------------------end of slice loop--------------------

     if(KeepSteadyState3D==No)
     {         
	lo to segm times l5	;  l5 = Nsegments
     }

        lo to start times NAE   ;  NAE loop used for averaging experiments
           subr Evolution()
	lo to start times NR    ;  NR loop used for repetitions
	 0u     grad_matrix.res

         0u     o1list.res
         0u     o2list.res

SETUP_GOTO(start)

exit

;fisp phase lists
ph0 = 0
ph1 = 0
ph3 = 0
ph4 = 0
ph5 = 0
ph6 = 0
