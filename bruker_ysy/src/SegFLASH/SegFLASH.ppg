;**************************************************************** ;
; Copyright (c) 2000 - 2003
; Bruker BioSpin MRI GmbH
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;
;*****************************************
;
; d0: TR padding
; d1: T1 padding
; d2: T2 padding
; d4: RampTime
;
; l1: segment size:		ACQ_phase_factor
; l2: number of movie frames	PVM_NMovieFrames
; l3: number of segments:	PVM_EncMatrix[1]/ACQ_rare_factor

#include <MRI.include>
#include <PrepModulesHead.mod>

define delay d3mde
"d3mde = d3 - de"

define loopcounter framecount
define loopcounter l3d
"l3d = l3"
define loopcounter l4d
"l4d = l4"
define loopcounter l5d
"l5d = l5"                          ;PVM_EncMatrix[2]: used in subr loop3D

define list<phase> phaselist = {$RFPhaseList}
define list<frequency> freqTx = {$ACQ_O1_list}
define list<frequency> freqRx = {$ACQ_O1B_list}

#define r2d ACQ_spatial_phase_1
#define r3d ACQ_spatial_phase_2

grad_zero_for_gs <r2d, r3d>

#include <SegFLASH.mod>

INIT_DEVICES

                       subr FlowSatInit()
                       subr SatTransInit()
                       subr InitDummies()

start,             d9       freqTx:f1
                   0u       r2d.store
                   0u       r3d.store

  segorslice,	   0u        ;Alternate: next segment. Serial: next slice
           if(SegmentSliceOrder == Alternate)
           {
                       subr myDriftComp()
           }

    sliceorseg, UPDATE_DYN_PARS_30u   ;Alternate: next slice. Serial: next segment
           if(SegmentSliceOrder == Serial)
           {
                       subr myDriftComp()
           }
                       subr TriggerInv()
                       subr Inversion()
                       subr TriggerAcq()
                       subr Tagging()
                       subr FlowSat()
                       subr FovSat()
                       subr SatTrans()
                       subr FatSup()
                            "framecount = l2"
       movie,
                   0u       r2d.restore
                   0u       r3d.restore

          line,      	    ;--flash loop -----------------------
                   d9       freqRx(receive):f1
                   d6       grad_ramp{0, 0, g9} freqTx:f1

		   	    ;--slice selection-------------------	
                   d3       grad_ramp{0, 0, g0}
                  (p0:sp0   phaselist):f1
                   d4       grad_off

		   	    ;--slice reph, read deph, phase enc--
           if(FlowCompOnOff == Off)
           {
                  d10       grad_ramp{g2, r2d*g3, g1+r3d*g4}
                   d2       grad_off
           }
           else
           {
                       subr FlowComp()
           }
		   	    ;--frequency encoding----------------
                d3mde       grad_ramp{g5, 0    , 0         }

                       subr adcstart(NOPH , phaselist )

			    ;--read spoiler + phase encoding------
                  d11       grad_ramp{g6, r2d*g7, r3d*g8   } ;2nd & 3rd dims
                  d12       grad_ramp{g6, 0     , 0        }
                   d3       grad_off

                       subr adcend(d0)

                   0u       phaselist.inc ;for RF spoiling
                   0u       r2d.inc
                   0u       r3d.inc

          lo to line times l1

               if "framecount > 1" ;delay for all frames but the last one 
               {
                   d5
               }
                            "framecount=framecount-1"		

       lo to movie times l2

                  d13       grad_ramp{g10,g10,g10}
                   d4       grad_off

               if(SegmentSliceOrder == Alternate)
               {
                   0u       grad_matrix.inc 
                   0u       freqTx.inc
                   0u       freqRx.inc
                       subr IncrInvFreqList()
               }


               if(SegmentSliceOrder == Serial)
               {
                   0u       r2d.store
                   0u       r3d.store
               }
                   d1
                
    lo to sliceorseg times l3d       ;Alternate: next slice. Serial: next segment

                            "l3d = l3"     ;reset counter changed in SegFLASH.mod

               if(SegmentSliceOrder == Alternate)
               {
                   0u	    r2d.store
                   0u	    r3d.store
               }

               if(SegmentSliceOrder == Serial)
               {
                       subr loop3D()

                   0u       grad_matrix.inc
                   0u       freqTx.inc
                   0u       freqRx.inc

                       subr IncrInvFreqList()
                       subr NewDummies()
               }

  lo to segorslice times l4d       ;Alternate: next segment. Serial: next slice

                            "l4d = l4"   ;reset counter changed in SegFLASH.mod

                   0u       grad_matrix.res
                   0u       freqTx.res
                   0u       freqRx.res

               if(SegmentSliceOrder == Alternate)
               {
                       subr loop3D()
               }

lo to start times NAE

                       subr SatTransInc()

               if(PVM_EvolutionOnOff == On)
               {
                       subr InitDummies()
                       subr Evolution()	    
               }

lo to start times NR    

SETUP_GOTO(start)
exit

ph0 = 0
ph1 = 0
