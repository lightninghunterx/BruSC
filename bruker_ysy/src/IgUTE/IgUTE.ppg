;===============================================================
;=
;= $Source$
;=
;= A radial imaging pulse program
;=
;= $Id$
;===============================================================

#include <MRI.include>
#include <PrepModulesHead.mod>
#include <Trajectory.mod>
#include <Navigator.mod>

define list<grad_shape> Shape2={$GradShape2}

;============================================================

if (PVM_TrajAdjustmentRunning == Yes)
{ 
  subr trajPerform()
}
else
{
;===========================================================
;   definition of delays
;===========================================================

define delay d1m
"d1m = d1 - 10u"

define delay spoilt
"spoilt = d1 + d16"

define delay del
"del = d12 - de + d5"

define delay d6m20
"d6m20 = d6 - 20u"

;===========================================================
;   declaration of 2d loop
;===========================================================
define list<grad_scalar> ProjR={$GradAmpR}
define list<grad_scalar> ProjP={$GradAmpP}
define list<grad_shape> Shape1={$GradShape1}
define list<grad_shape> Shape2={$GradShape2}

grad_zero_for_gs <ProjR,ProjP>

ProjR.res
ProjP.res

define loopcounter projs = {$NPro}

define list<frequency> freqTx = {$ACQ_O1_list}
define list<frequency> freqRx = {$ACQ_O1B_list}

subroutine TTLOut_Start()
{
  if(PpgTTLOut==Yes)
  {
    1u TTL2_LOW
  }
  else
  {
    1u
  } 
}

subroutine TTLOut_End()
{
  if(PpgTTLOut==Yes)
  {
    1u TTL2_HIGH
  }
  else
  {
    1u
  } 
}

INIT_DEVICES

;===============================================================================
;	D/P               spec control          gradients	         
;===============================================================================
             subr SatTransInit()
start, 	0u
slice,       UPDATE_DYN_PARS_30u
       10u        freqRx(receive):f1

   if (GradSync == Yes)
   {
        1u	  GRAD_SYNC
   }

;----------------------- preparation modules -----------------------
             subr FovSat()
             subr SatTrans()
             subr FatSup()

   if(PVM_NavOnOff == On)
   {
       20u        SWITCH_(Navigator)
       20u        switch_realtime_tables
             subr Navigator(sp5, ph0, ph1)
   }
  
   if "l11>=0"
   {
     1u
   }
   else
   { 
     subr TTLOut_Start()
   }
;----------------------------------slice spoiler--------------------
     d6m20        grad_ramp{0, 0, g5}

   if(PVM_NavOnOff == On)
   {
       20u        SWITCH_(job0)
   }
   else
   {    
       20u
   }
        d1        grad_off
;------------------------- slice selection -------------------------
       10u        gc_control
  {
       d11        grad_shape{0, 0, Shape1()}
        d5
   if(ACQ_scan_type != Setup_Experiment)
   {
       d15	  grad_shape{ReadGrad*Shape2()*ProjR, PhaseGrad*Shape2()*ProjP,0}		      
   }
   if(ACQ_scan_type == Setup_Experiment)
   {
       d15
   }
  }
       d1m        freqTx:f1             	 
       (p0:sp0    ph1):f1 
       del

;------------------------- fid acquisition ------------------------
                  ADC_INIT_(job0,ph1,ph0)
        d7        ADC_START_(job0)             
  AQ_(job0)
    spoilt

   if "l11>=0"
   {
     1u
   }
   else
   { 
     subr TTLOut_End()
   }
        d0        ADC_END_(job0)
     
;--------------------------- slice loop  ---------------------------
        0u        freqTx.inc               
	0u        grad_matrix.inc
     lo to slice times NSLICES
;------------------------- dummy scan loop -------------------------
                "l11=l11-1"
     if "l11>=0" goto start	
;------------------------- averaging loop --------------------------
     lo to start times NA
;------------------------- projection loop -------------------------
        0u        ProjR.inc
        0u	  ProjP.inc
     lo to start times projs
;------------------------ oversampling loop ------------------------		                     
     lo to start times l12

;-------------------------- sattrans loop --------------------------
 
             subr SatTransInc()
;------------------------- repetition loop -------------------------
     lo to start times NR

SETUP_GOTO(start) 
exit
}
;============================================================
;phase lists

ph0 = 0
ph1 = 0 
;============================================================
