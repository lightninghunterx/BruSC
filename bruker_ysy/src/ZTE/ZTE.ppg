;===============================================================
;=
;= $Source$
;=
;= A radial imaging pulse program
;=
;= $Id$
;===============================================================


#include <MRI.include>

;==========================================================
;   definitions
;==========================================================

define delay dAcq       = {$AcqDelay}
define delay dRise      = {$RiseTime}
define delay dSettle    = {$GradSettle}
define delay dEosc      = {$EndOfScan}
define delay dWait      = {$TRWait}

; convert to s
"dAcq    = dAcq      * 1e-6"
"dRise   = dRise     * 1e-3"
"dSettle = dSettle   * 1e-3"
"dEosc   = dEosc     * 1e-3"
"dWait   = dWait     * 1e-3"

define list<frequency> fList = {$ACQ_O1_list}

define list<grad_scalar> GradR
define list<grad_scalar> GradP
define list<grad_scalar> GradS

"l0 = 0"
define loopcounter nr = {$NR}

;==========================================================
;   sequence blocks
;==========================================================

subroutine prepareDummies(loopcounter nDummies)
{
  ; before dummies: count backwards
  if (nDummies > 0)
  {
    dsl,
    0u GradR.dec
    0u GradP.dec
    0u GradS.dec
    0u fList.dec
    lo to dsl times nDummies
  }
}

subroutine zteBeforeAcq()
{
  dWait

  ;------------gradient------------------------------------

  dRise                                  grad_ramp{GradR * GradAmpR, GradP * GradAmpP, GradS * GradAmpS}
  dSettle        fList(receive):f1

  ;------------excitation----------------------------------

  10u            fList:f1
                 (p0:sp0 ph0):f1
  dAcq
}

subroutine zteAcqReal()
{
                 ADC_INIT_(job0, ph0, ph0)
  AQ_(job0)      ADC_START_(job0)
  5u
  dEosc          ADC_END_(job0)
}

subroutine zteAcqDummy()
{
  de
  AQ_(job0)
  5u
  dEosc
}

subroutine zteAfterAcq()
{

   
  0u                                     GradR.inc
  0u                                     GradP.inc
  0u                                     GradS.inc
  0u             fList.inc
  
  if (GradOff == Yes)
  {
    dRise                                grad_off
  }
  else
  {
    dRise
  }
}

;==========================================================
;   segmented preparation
;==========================================================

#include <PrepModulesHead.mod> 

subroutine segmentAcquire()
{
  subr zteBeforeAcq()
  subr zteAcqReal()
  subr zteAfterAcq()
}

subroutine segmentDummy()
{
  subr zteBeforeAcq()
  subr zteAcqDummy()
  subr zteAfterAcq()
}

subroutine segmentPrep()
{
  ; preparation
  subr TriggerPhase()
  subr FatSup()
  subr FovSat()

  ; dummies
  subr prepareDummies(PVM_SegmentationDummies)
}

#include "Segmentation.mod"

;==========================================================
;   settings
;==========================================================

INIT_DEVICES

;==========================================================
;   pulse program
;==========================================================

;--------------initial dummies-----------------------------

if (ACQ_scan_type == Scan_Experiment)
{
  subr prepareDummies(PVM_DummyScans)
  subr segmentationDummyAcq(PVM_DummyScans)
}

start, 0u

;--------------segmented preparation-----------------------

if (ACQ_scan_type == Scan_Experiment)
{
  subr segmentationPrep()
}

;--------------actual acquisition--------------------------

subr segmentationAcquire(start)

;--------------evolution module----------------------------

if ((PVM_EvolutionOnOff == On) && (ACQ_scan_type == Scan_Experiment))
{
  ; switch off gradients
  dRise                                  grad_off
                                               
  ; evolution delay
  subr Evolution()

  ; dummies before next repetition
  0u             iu0
  if "l0 == nr" goto evolEnd  
  subr prepareDummies(PVM_DummyScans)
  subr segmentationDummy(PVM_DummyScans)
  
  evolEnd,
}

lo to start times NR
                                               
;--------------finish--------------------------------------

SETUP_GOTO(start)

  dRise                                  grad_off
exit

;===========================================================
;phase lists
;===========================================================

ph0 = 0
