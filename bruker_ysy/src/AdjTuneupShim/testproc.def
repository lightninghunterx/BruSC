



void parameter 
{
   display_name "Print shim info";
   relations Test1_CheckSysinfoCallsRel;

}Test1_CheckSysinfoCalls;


double parameter Testshimsets[][];

// dynamic shim tests

int parameter
{
  display_name "Available shim coils";
  minimum 0 outofrange nearestval;
  editable false;
} NBShims;

double parameter 
{
  units "%";
  format "%.3f";
  relations backbone;
} BasicShim[];

double parameter 
{ 
  units "A";
  format "%.6f";
  relations backbone;
} BasicShimAmp[];

char parameter
{
  display_name "Coil ID";
  editable false;
}ShimIDs[][];


YesNo parameter 
{
   display_name "Dynamic Shim Exp.";
   short_description "Activates / deactivates dynamic shim test.";
   relations TestDynamicShimsRel;
}TestDynamicShims;

// shim increment parameter


YesNo parameter
{
  display_name "Auto Shim Increments";
  short_description "Derives shim increments from Field deviation.";
  long_description "Shim increments are adapted according to the field effect of the shims within a centered sphere.";
  relations backbone;
}ShimIncAuto;

YesNo parameter
{
  display_name "Default Diameter";
  short_description "Default Diameter of spherical volume used for field deviation specification.";
  relations backbone;

}DefaultDiameter;


double parameter
{
   display_name "Sphere Diameter";
   short_description "Diameter of spherical volume used for field deviation specification.";
   units "mm";
   format "%.1f";
   minimum 1.0 outofrange nearestval;
   relations backbone;
}SphereDiameter;

double parameter
{
  display_name "Max. Shim increment";
  short_description "Maximum shim increment per shim coil.";
  units "%";
  format "%.1f";
  minimum 0.0 outofrange nearestval;
  maximum 200.0 outofrange nearestval;
  relations backbone;
}MaxDsIncr;

double parameter
{
  display_name "Field Deviation";
  short_description "Prescribed Field Deviation of shim increments.";
  units "Hz";
  format "%.1f";
  minimum 0.0 outofrange nearestval;
  relations backbone;
}FieldDev;

double parameter 
{ 
  display_name "Shim Increment"; 
  units "%";
  format "%.3f";
  relations backbone;
} ScIncPerc[];

double parameter 
{ 
  display_name "Shim Increment";
  units "Hz";
  format "%.3f";
  relations backbone;
} ScIncHz[];

double parameter 
{ 
  display_name "Shim Increment";
  units "A";
  format "%.6f";
  relations backbone;
} ScIncAmp[];

// dynamic shim parameter

DYN_SHIM_EXP_TYPE parameter
{
   display_name "Dyn. Shim Experiment";
   short_description "Type of dynamic shim experiment to be executed.";
   relations backbone;
}DynShimExpTyp;

SHIM_COIL_SELECT_TYPE parameter
{
   display_name "Shim Coil";
   short_description "Select examined shim coil.";
   relations backbone;
}SelectShimCoil;

int parameter Selected_ShimChannel;

double parameter
{
   display_name "Shim Ramp";
   short_description "Duration of shim ramp.";
   units "ms";
   format "%.3f";
   minimum 0.001 outofrange nearestval;
   relations backbone;
}ShimRamptime;

double parameter
{
   display_name "Shim Plateau";
   short_description "Duration of shim plateau.";
   units "ms";
   format "%.3f";
   minimum 0.001 outofrange nearestval;
   relations backbone;
}ShimPlateau;






double parameter
{
  display_name "Coil Increments";
  short_description "Increments for examined shim coil.";
  minimum -100.0 outofrange nearestval;
  maximum 100.0 outofrange nearestval;
  units "%";
  relations backbone;
}SelectShimCoilIncrements[];


YesNo parameter
{
  display_name "Data Acquisition";
  short_description "Switching dynamic shims in singlepulse repetition loop.";
  relations backbone;
}DynShimAcqExperiment;

int parameter
{
   display_name "N. SPS";
   short_description "Number of shim power supplies (SPS[0] virtual).";
   editable false;
   relations backbone;
}NShimPS;

int parameter
{
  display_name "N. Dyn. Shims";
  short_description "Number of dynamic shimsets to be tested.";
  minimum 1 outofrange nearestval;
  relations backbone;
} NDynShims;

int parameter
{
  display_name "Loop Size";
  short_description "Loop size of dynamic shim set repetition without acquisition.";
  minimum 1 outofrange nearestval;
  relations backbone;
}DynShimLoopsize;




double parameter
{
  display_name "Sum Current";
  short_description "Shim Power Supply sum current for dynamic shim (SPS[0]: virtual).";
  relations backbone;
  units "A";
  format "%.3f";
  editable false;
}DynShimSumCurr[][];

double parameter
{
  display_name "Shim Power";
  short_description "Power of dynamic shim vector (SPS[0]: virtual).";
  relations backbone;
  units "W";
  format "%.3f";
  editable false;
}DynShimPower[][];



double parameter
{
  display_name "DS PPG Vector";
  units "%";
  relations backbone;
} DynamicShims[][];


double parameter ShimMaxSPS[];
double parameter ShimMaxCoil[];

double parameter FIDArea[][];
double parameter FIDFoffset[][];
double parameter FIDPeakwidth[][];


FID_SHIM_RESULT parameter
{
    display_name "Base shim FID Result";
}BaseFIDResult;


FID_SHIM_RESULT parameter
{
    display_name "Shim FID Results";
}ShimFIDResults[];

int parameter ActSteadyStateCount;

int parameter
{
    display_name "Steady State FID's";
    short_description "Number of FID scanned after shim changes before signal is analyzed.";
    relations NFIDSteadyStateRange;
}NFIDSteadyState;

int parameter
{
    display_name "FID's per shim";
    short_description "Number of FID per shim used for significance analysis.";
    relations NFIDRange;
}NFID;

int parameter
{
    display_name "Actual Base Shim FID";
}ActbaseFID;

int parameter
{
    display_name "Number of Shim FIDs";
}NShimFID;

int parameter
{
    display_name "Actual Shim FID";
}ActShim;

YesNo parameter ShimFIDTestSuccess;
YesNo parameter TestSucceeded[];

int parameter
{
    relations TestShimEffectAutoCounterRel;
}TestShimEffectAutoCounter;

int parameter
{
    relations ThisRGAdjustmentCounterRel;
}ThisRGAdjustmentCounter;

int parameter
{
    display_name "Tested Shim Channel";
    relations TestShimCurrentRel;
}TestShimChannel;

double parameter
{
    display_name "Test Current";
    units "A";
    relations TestShimCurrentRel;
}TestShimCurrent;

double parameter
{
    display_name "Test Current";
    units "%";
    relations TestShimCurrentRel;
    editable false;
}TestShimCurrentPerc;

char parameter
{
    display_name "Test Shim Identifier";
    editable false;
    relations TestShimCurrentRel;
}TestShimIdentifier[];

int parameter
{
    relations TestShimCurrentAutocounterRel;
}TestShimCurrentAutocounter;
char parameter ShimCoeffHwStatus[];

char parameter TestMessages[][];



